import numpy as np
import pandas as pd
import requests
import datetime
# import time 

# ------- VS Code Basic Debug -----------
# if "import requests could not be resolved from source":
# launch ">python: select interpreter" if needed in the "Command Palette" (ctrl+shit+P)
# if "command 'python.setInterpreter' not found"
# Bottom left in purple/blue bar, click "restricted mode", trust workspace

# ------- Indicators API IWB -----------
# Replace token: open iwb in browser, inspect, application tab, local storage, and you get an access token valid for 1h (do not use ID token). Use the one from login.evooq.io, not the one from test
# Check token validity: print(reqIWB.status_code) - if 401, token is invalid
# doc: https://requests.readthedocs.io/en/latest/user/quickstart/#make-a-request
# Call "as of": use "https://iwb-dev.evooq.io/api/indicators/timeseries/global-financial-risk/summary?asOf=1654560000000".
# Time is in nanoseconds. Use "https://www.unixtimestamp.com/" (in milliseconds) and add three 0 to get nanoseconds

# Python csv generated by Pandas will be placed in the folder indicated in VS Terminal, from where the sript is launched.

#DO NOT PUSH TO GIT WITH TOKEN CLEAR
token = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InBLdlkwOHREak1kWlVCZ2gtSzZISSJ9.eyJodHRwczovL2V2b29xLmlvL25hbWUiOiJUaG9tYXMgQ2liaWxzIiwiaHR0cHM6Ly9ldm9vcS5pby9lbWFpbCI6InRob21hcy5jaWJpbHNAZXZvb3EuY2giLCJodHRwczovL2VkZ2VsYWIuY2gvb3JnYW5pemF0aW9uX2lkIjoiM2RkOWEzMWEtNzBmMy00NzQyLWJmMGUtMzI4YmExY2RmMjQ3IiwiaHR0cHM6Ly9ldm9vcS5pby91c2VyX3JvbGVzIjpbIm1pcC1pbmRpY2F0aXZlIiwibGNtLWJhc2ljIiwiYWMtY29uc3VtZXIiLCJpd2ItZnVsbCJdLCJodHRwczovL2V2b29xLmlvL3pvbmVpbmZvIjoiRXVyb3BlL1p1cmljaCIsImlzcyI6Imh0dHBzOi8vbG9naW4uZXZvb3EuaW8vIiwic3ViIjoiYXV0aDB8NWY2MDdmYjQ1OTFkY2UwMDcwM2VhNjFlIiwiYXVkIjpbImh0dHBzOi8vZXZvb3EuZXUuYXV0aDAuY29tL2FwaS92Mi8iLCJodHRwczovL2V2b29xLmV1LmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2NTk2ODM5MzYsImV4cCI6MTY1OTc3MDMzNiwiYXpwIjoiOWJUcDNjWjBpa0dyTG81RlcxT09mbWJudHk3TXdrYU0iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIn0.f6UGgyhYLNhw6NTNQzyxAirXlgfk3P493ktV_v1k2F407QxNdGHZVuwVFv-KXhQL5_kJNdnhcxeM9pP4NCJJhgRZpdoTgq46Q4H_Wrn-k641OD41SUQdGoLNGhXcqmPpfQwok1x4tLsg47shI_I4MPN3icA3V2Wa0k8vy4FFIQlFH15kdArJGqwbrMOy8f7AwJZ3EohgDRhzTj9XwZVAD5yHsezCpaN6QPAjr9ikZfZP3LH3Pdlhqwk_cJ5jJEKsPPJXLfKTzp6adeJsYerrLt0Exs3NORg-CT762GzNhrmh8yD1IjhVEdDFmnGqxXQQ6w0d6hpSm4Pw1K7cZzScSA"

# ------- Time elements -----------
# Time in nanoseconds of current time must be updated manually to match exactly the last computation. Uncomment lines below to find it - "asOf" in the payload
#getTimeNano = "https://iwb.evooq.io/api/indicators/timeseries/global-financial-risk/summary"
#reqIWBTime = requests.get(getTimeNano, headers={"Authorization": f"Bearer {token}"})
#print(reqIWBTime.json())

milliSecondsCurrentTime = 1659571200000 #time.time_ns() 
milliSecondsInDay = 86400000 
milliSecondsInYear = 31536000000

# -------- Script user inputs ----------
yearInterval = 5        # Defines the number of year one wants data for
milliSecondsOrYear = 1  # Defines if one wants timestamps in ms (0) or real dates (1) in the csv files

# starting milliSecondsIterator years ago
startDate = milliSecondsCurrentTime - (yearInterval*milliSecondsInYear)


# ----------------- GFR Gathering ----------------------
# Gathering GFR value over time
milliSecondsIterator = startDate

dataStampListGFR = []
GFRList = []
displayCounterGFR = 0

baseRequestURLGFR = "https://iwb.evooq.io/api/indicators/timeseries/global-financial-risk/summary?asOf="

while milliSecondsIterator < milliSecondsCurrentTime:
    timeStringRequestURL = str(milliSecondsIterator)
    fullRequestURLGFR = baseRequestURLGFR + timeStringRequestURL
    # print(fullRequestURL)

    reqIWBGFR = requests.get(fullRequestURLGFR, headers={"Authorization": f"Bearer {token}"})
    #print(reqIWBGFR.json())

    if(milliSecondsOrYear == 0):
        dataStampListGFR.append(milliSecondsIterator)
    
    if(milliSecondsOrYear == 1):
        dataStampListGFR.append(datetime.datetime.fromtimestamp(milliSecondsIterator/1000))

    GFRList.append(reqIWBGFR.json()['interpretation']['outlook'])
    
    milliSecondsIterator += milliSecondsInDay
    if((milliSecondsIterator - startDate) / (milliSecondsCurrentTime - startDate) > 0.5 and displayCounterGFR == 0):
        print("GFR at 50%")
        displayCounterGFR = 1

d1 = {'TimeStamp': dataStampListGFR,  'GFR': GFRList}
df = pd.DataFrame(data = d1)
df.to_csv('GFR.csv',index=False)

print("GFR Completed")

# ----------------- SPX Gathering ----------------------
# Gathering whole SPX time serie
baseRequestURLSPX = "https://iwb.evooq.io/api/indicators/timeseries/spx?from="
fullRequestURLSPX = baseRequestURLSPX + str(startDate) + "&to=" + str(milliSecondsCurrentTime)
reqIWBSPX = requests.get(fullRequestURLSPX, headers={"Authorization": f"Bearer {token}"})

Iterator2 = 0

# We do not have daily data, only business day data, hence around 260 daily data points per year
maxIterator2 = len(reqIWBSPX.json()['data'])
# maxIterator2 = (milliSecondsCurrentTime - startDate)/milliSecondsInDay # That gives 365 days for a year and hence does not work

dataStampListSPX = []
SPXList = []
displayCounterSPX = 0

while Iterator2 < maxIterator2:
    
    if(milliSecondsOrYear == 0):
        dataStampListSPX.append(reqIWBSPX.json()['data'][Iterator2]['timestamp'])
    
    if(milliSecondsOrYear == 1): 
        dataStampListSPX.append(datetime.datetime.fromtimestamp(reqIWBSPX.json()['data'][Iterator2]['timestamp']/1000))

    SPXList.append(reqIWBSPX.json()['data'][Iterator2]['value'])
    Iterator2 += 1
    
    if((Iterator2 / Iterator2) > 0.5 and displayCounterSPX == 0):
        print("SPX at 50%")
        displayCounterSPX = 1
    

d2 = {'TimeStamp': dataStampListSPX,  'SPX': SPXList}
df = pd.DataFrame(data = d2)
df.to_csv('SPX.csv',index=False)

print("SPX Completed")